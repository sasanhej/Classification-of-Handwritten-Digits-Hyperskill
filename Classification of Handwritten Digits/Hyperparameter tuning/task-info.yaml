type: edu
files:
- name: analysis.py
  visible: true
  text: |
    import tensorflow as tf
    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.neighbors import KNeighborsClassifier
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.preprocessing import Normalizer
    from sklearn.metrics import accuracy_score
    from warnings import simplefilter


    simplefilter(action='ignore', category=FutureWarning)

    (X_train, y_train) = tf.keras.datasets.mnist.load_data(path="mnist.npz")[0]
    X_train = X_train.reshape(-1, 784)
    '''
    #Stage 1/5
    print(f"Classes: {np.unique(y_train)}")
    print(f"Features' shape: {X_train.shape}")
    print(f"Target's shape: {y_train.shape}")
    print(f"min: {X_train.min()}, max: {X_train.max()}")
    '''
    #Stage 2/5
    X_train, X_test, y_train, y_test = train_test_split(X_train[:6000], y_train[:6000], test_size=0.3, random_state=40)
    '''
    print(f"x_train shape: {X_train.shape}")
    print(f"x_test shape: {X_test.shape}")
    print(f"y_train shape: {y_train.shape}")
    print(f"y_test shape: {y_test.shape}")
    print('Proportion of samples per class in train set:')
    print(pd.Series(y_train).value_counts(normalize=True))
    '''
    #Stage 3/5:
    def fit_predict_eval(model, features_train=X_train, features_test=X_test, target_train=y_train, target_test=y_test, random_state=40):
        model.fit(features_train, target_train)
        target_prediction = model.predict(features_test)
        score = np.mean(target_prediction == target_test)
        print(f'Model: {model}\nAccuracy: {score}\n')

    '''
    fit_predict_eval(KNeighborsClassifier())
    fit_predict_eval(DecisionTreeClassifier(random_state=40))
    fit_predict_eval(LogisticRegression(random_state=40))
    fit_predict_eval(RandomForestClassifier(random_state=40))
    print(f'The answer to the question: {"RandomForestClassifier"} - {0.939}')
    '''
    #Stage 4/5:
    X_train_norm = Normalizer().fit_transform(X_train)
    X_test_norm = Normalizer().fit_transform(X_test)

    def fit_predict_eval_norm(model, features_train=X_train_norm, features_test=X_test_norm, target_train=y_train, target_test=y_test, random_state=40):
        model.fit(features_train, target_train)
        target_prediction = model.predict(features_test)
        score = accuracy_score(target_test, target_prediction)
        print(f'Model: {model}\nAccuracy: {score}\n')

    fit_predict_eval_norm(KNeighborsClassifier())
    fit_predict_eval_norm(DecisionTreeClassifier(random_state=40))
    fit_predict_eval_norm(LogisticRegression(random_state=40))
    fit_predict_eval_norm(RandomForestClassifier(random_state=40))
    print(f'The answer to the 1st question: yes')
    print(f'The answer to the 2nd question: {"KNeighborsClassifier"}-{0.953}, {"RandomForestClassifier"}-{0.937}')
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |-
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re


    class CCATest(StageTest):

        def generate(self):
            return [TestCase(time_limit=1800000)]

        def check(self, reply, attach):
            lines = reply.split('\n')
            if "" in lines:
                lines = list(filter(lambda a: a != "", lines))

            # general
            lines2check = []

            for item in lines:
                if any(key_word in item.replace(" ", "").lower() for key_word in ['k-nearest', 'forestalgorithm', 'accuracy']):
                    lines2check.append(item)

            if len(lines2check) != 4:
                return CheckResult.wrong(
                    feedback='Something is wrong with the output format, check the example output at the stage 5')

            # k-nearest neighbours classifier
            algorithm_name_reply = lines2check[0]
            accuracy_reply = re.findall(r'\d*\.\d+|\d+', lines2check[1])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback='It should be one number in the "accuracy:" section')

            if not 0.957 <= float(accuracy_reply[0]) < 1:
                return CheckResult.wrong(
                    feedback=f"The accuracy for {algorithm_name_reply} is wrong")

            # random forest classifier
            algorithm_name_reply = lines2check[2]
            accuracy_reply = re.findall(r'\d*\.\d+|\d+', lines2check[3])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback='It should be one number in the "accuracy:" section')

            if not 0.945 <= float(accuracy_reply[0]) < 1:
                return CheckResult.wrong(
                    feedback=f"The accuracy for {algorithm_name_reply} is wrong")
            return CheckResult.correct()


    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import CCATest

    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15237#comment
status: Failed
feedback:
  message: |-
    Exception in test #1

    Traceback (most recent call last):
      File ".idea\VirtualEnvironment\lib\site-packages\hstest\testing\execution\main_module_executor.py", line 36, in _invoke_method
        runpy.run_module(
      File "Classification of Handwritten Digits\task\analysis.py", line 4, in <module>
        from sklearn.model_selection import train_test_split
      File ".idea\VirtualEnvironment\lib\site-packages\sklearn\__init__.py", line 82, in <module>
        from .base import clone
      File ".idea\VirtualEnvironment\lib\site-packages\sklearn\base.py", line 17, in <module>
        from .utils import _IS_32BIT
      File ".idea\VirtualEnvironment\lib\site-packages\sklearn\utils\__init__.py", line 20, in <module>
        from scipy.sparse import issparse
      File ".idea\VirtualEnvironment\lib\site-packages\scipy\sparse\__init__.py", line 274, in <module>
        from ._csr import *
      File ".idea\VirtualEnvironment\lib\site-packages\scipy\sparse\_csr.py", line 11, in <module>
        from ._sparsetools import (csr_tocsc, csr_tobsr, csr_count_blocks,
    ImportError: numpy.core.multiarray failed to import

    Please find below the output of your program during this failed test.

    ---

    stderr:
    C:\Users\s_hej\PycharmProjects\Classification of Handwritten Digits\.idea\VirtualEnvironment\lib\site-packages\scipy\__init__.py:161: UserWarning: A NumPy version >=1.21.6 and <1.28.0 is required for this version of SciPy (detected version 1.19.5)
      warnings.warn(f"A NumPy version >={np_minversion} and <{np_maxversion}"
    RuntimeError: module compiled against API version 0xf but this version of numpy is 0xd
    RuntimeError: module compiled against API version 0xf but this version of numpy is 0xd
    RuntimeError: module compiled against API version 0xf but this version of numpy is 0xd
    RuntimeError: module compiled against API version 0xf but this version of numpy is 0xd
    RuntimeError: module compiled against API version 0xf but this version of numpy is 0xd
    RuntimeError: module compiled against API version 0xf but this version of numpy is 0xd
  time: "Wed, 12 Jul 2023 14:11:08 UTC"
record: 4
