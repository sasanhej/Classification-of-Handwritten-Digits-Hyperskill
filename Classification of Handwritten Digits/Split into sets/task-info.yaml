type: edu
files:
- name: analysis.py
  visible: true
  text: |
    import os
    import tensorflow as tf
    import pandas as pd
    import numpy as np

    (X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data(path="mnist.npz")
    X_train = X_train.reshape(-1, 784)
    print(f"Classes: {np.unique(y_train)}")
    print(f"Features' shape: {X_train.shape}")
    print(f"Target's shape: {y_train.shape}")
    print(f"min: {X_train.min()}, max: {X_train.max()}")
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re


    class CCATest(StageTest):

        def generate(self):
            return [TestCase(time_limit=60000)]

        def check(self, reply, attach):
            lines = reply.split('\n')
            if "" in lines:
                lines = list(filter(lambda a: a != "", lines))

            # general
            if len(lines) < 15:
                return CheckResult.wrong(
                    feedback="There is not enough lines in the answer, check the example output at the stage 2")
            if 'x_train' not in lines[0].lower() \
                or 'x_test' not in lines[1].lower() \
                or 'y_train' not in lines[2].lower() \
                or 'y_test' not in lines[3].lower() \
                or 'proportion' not in lines[4].lower():
                return CheckResult.wrong(
                    feedback="Something is wrong with the order of answers or in the names of the variables, check the example output at the stage 2")

            # 1st question
            x_train_shape_reply = list(map(float, re.findall(r'\d*\.\d+|\d+', lines[0])))
            if len(x_train_shape_reply) != 2:
                return CheckResult.wrong(feedback="The shape of features' train set should consist of 2 numbers")
            if x_train_shape_reply[0] != 4200:
                return CheckResult.wrong(feedback="Wrong number of rows in features' train set")
            if x_train_shape_reply[1] != 784:
                return CheckResult.wrong(feedback="Wrong number of columns in the features' train set")

            x_test_shape_reply = list(map(float, re.findall(r'\d*\.\d+|\d+', lines[1])))
            if len(x_test_shape_reply) != 2:
                return CheckResult.wrong(feedback="The shape of features' test set should consist of 2 numbers")
            if x_test_shape_reply[0] != 1800:
                return CheckResult.wrong(feedback="Wrong number of rows in features' test set")
            if x_test_shape_reply[1] != 784:
                return CheckResult.wrong(feedback="Wrong number of columns in features' test set")

            y_train_shape_reply = list(map(float, re.findall(r'\d*\.\d+|\d+', lines[2])))
            if len(y_train_shape_reply) != 1:
                return CheckResult.wrong(
                    feedback="The shape of the target variable from the train set should consist of 1 number")
            if y_train_shape_reply[0] != 4200:
                return CheckResult.wrong(feedback="Wrong number of rows in the target variable from the train set")

            y_test_shape_reply = list(map(float, re.findall(r'\d*\.\d+|\d+', lines[3])))
            if len(y_test_shape_reply) != 1:
                return CheckResult.wrong(
                    feedback="The shape of the target variable from the test set should consist of 1 number")
            if y_test_shape_reply[0] != 1800:
                return CheckResult.wrong(feedback="Wrong number of rows in the target variable from the test set")

            # 2nd question
            proportions_reply_dict = {}

            for line in lines[5:]:
                # key is the name if the class
                key = list(map(float, re.findall(r'\d+', line)))
                # value is the proportion of the class in key
                value = list(map(float, re.findall(r'\d*\.\d+', line)))
                if len(key) != 0 and len(value) != 0:
                    if key[0] in list(proportions_reply_dict.keys()):
                        return CheckResult.wrong(feedback="There are some duplicates in the list of classes")
                    else:
                        proportions_reply_dict[key[0]] = value[0]

            if set(proportions_reply_dict.keys()) != set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):
                return CheckResult.wrong(feedback="Wrong set of classes in the info about proportions")

            right_proportions = [0.1, 0.11, 0.1, 0.1, 0.11, 0.09, 0.1, 0.11, 0.09, 0.1]
            for class_name, ratio in zip(range(10), right_proportions):
                if not right_proportions[class_name] * 0.9 < proportions_reply_dict[class_name] < right_proportions[
                    class_name] * 1.1:
                    return CheckResult.wrong(feedback=f"Wrong ratio for class: {class_name}")

            return CheckResult.correct()


    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import CCATest

    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15234#comment
status: Solved
record: 1
